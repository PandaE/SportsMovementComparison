"""
完整的新界面布局使用说明和功能演示
"""

import sys
import os
from PyQt5.QtWidgets import QApplication, QMessageBox

# 添加项目路径
project_root = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, project_root)

from ui.main_window import MainWindow

def show_usage_guide():
    """显示使用指南"""
    guide_text = """
🎯 新界面布局使用指南

=== 📋 功能概述 ===
当启用"高级姿态分析"并进行视频对比时，会打开全新的高级分析界面，包含：

🎬 第一块：视频预览区域
• 左侧垂直布局显示用户视频和标准视频播放器
• 支持帧级导航和播放控制
• 可以拖动进度条查看不同帧

📊 第二块：阶段分析区域
• 右侧显示按动作配置的各个阶段
• 每个阶段包含：
  - 关键帧对比图像（用户 vs 标准）
  - 帧数显示和手动调整功能
  - 阶段得分和分析结果
  - 具体的测量对比数据

=== 🚀 使用步骤 ===

1. 📂 导入视频
   - 点击"导入用户视频"选择你的动作视频
   - 点击"导入标准视频"选择标准动作视频

2. ⚙️ 设置分析参数
   - 确保勾选"启用高级姿态分析 (实验功能)"
   - 选择运动类型：羽毛球
   - 选择动作类型：正手高远球/反手高远球等

3. 🔍 开始分析
   - 点击"开始分析对比"
   - 等待分析完成

4. 📈 查看结果
   - 新的高级分析窗口会自动打开
   - 左侧可以预览视频内容
   - 右侧查看各阶段的详细分析

=== 💡 功能亮点 ===

🎯 阶段级分析
• 将动作分解为多个关键阶段
• 每个阶段独立评分和建议
• 精确到帧的关键动作捕捉

🖼️ 关键帧对比
• 并列显示用户和标准动作帧
• 支持手动调整关键帧位置
• 实时更新对比分析

📏 精确测量
• 角度、距离、位置等多维度测量
• 清晰的"用户值 vs 标准值"对比
• 达标状态一目了然

⚡ 实时调整
• 可以手动修改每个阶段的关键帧
• 支持重新分析和对比
• 灵活的参数调整

=== 📝 示例数据格式 ===

架拍阶段结束:
• 大臂小臂夹角: 用户 95.3° vs 标准 88.7°
  ❌ 偏大 6.6° 
  测量点: right_shoulder → right_elbow → right_wrist

击球瞬间:
• 球拍与身体角度: 用户 45.2° vs 标准 42.8°
  ✅ 达标
  测量点: right_wrist → right_shoulder → left_shoulder

=== ⚠️ 注意事项 ===

1. 🎥 视频要求
   - 支持常见格式：MP4, AVI, MOV等
   - 清晰度足够识别人体关键点
   - 单人动作，正面或侧面角度佳

2. 🔧 性能考虑
   - 首次使用可能需要下载AI模型
   - 分析时间取决于视频长度和清晰度
   - 建议视频时长控制在30秒内

3. 📊 结果解读
   - 得分范围：0-100分
   - 绿色✅表示达标，红色❌表示需改进
   - 建议重点关注偏差较大的测量项

=== 🛠️ 故障排除 ===

如果遇到问题：
1. 检查视频文件是否可以正常播放
2. 确认启用了高级姿态分析功能
3. 查看控制台输出的错误信息
4. 尝试使用不同的视频文件

现在请启动主程序开始体验新的界面！
    """
    
    msg = QMessageBox()
    msg.setWindowTitle("新界面布局使用指南")
    msg.setText(guide_text)
    msg.setIcon(QMessageBox.Information)
    msg.exec_()

def main():
    """主函数"""
    app = QApplication(sys.argv)
    
    # 显示使用指南
    show_usage_guide()
    
    # 启动主窗口
    window = MainWindow()
    window.show()
    
    print("🎯 新界面布局已准备就绪！")
    print("📋 启用高级姿态分析后，将看到全新的分析界面")
    print("🎬 包含视频预览区域和阶段分析区域")
    print("📊 每个阶段显示关键帧对比和测量数据")
    
    sys.exit(app.exec_())

if __name__ == '__main__':
    main()